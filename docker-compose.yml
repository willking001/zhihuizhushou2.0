version: '3.8'

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: dianxiaozhu-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: dianxiaozhu123
      MYSQL_DATABASE: dianxiaozhu
      MYSQL_USER: dianxiaozhu
      MYSQL_PASSWORD: dianxiaozhu123
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./sql:/docker-entrypoint-initdb.d
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dianxiaozhu-network

  # Redis缓存
  redis:
    image: redis:latest
    container_name: dianxiaozhu-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - dianxiaozhu-network

  # Elasticsearch搜索引擎
  elasticsearch:
    image: elasticsearch:8.14.1
    container_name: dianxiaozhu-elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - dianxiaozhu-network

  # Kibana (可选，用于ES数据可视化)
  kibana:
    image: kibana:8.14.1
    container_name: dianxiaozhu-kibana
    restart: always
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - dianxiaozhu-network

  # Zookeeper (Kafka依赖)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: dianxiaozhu-zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - dianxiaozhu-network

  # Kafka消息队列
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: dianxiaozhu-kafka
    restart: always
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - dianxiaozhu-network

  # Kafka UI管理界面
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: dianxiaozhu-kafka-ui
    restart: always
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    ports:
      - "8082:8080" # 将Kafka-UI端口映射到8082
    networks:
      - dianxiaozhu-network

  # Minio对象存储 (用于文件存储)
  minio:
    image: minio/minio:latest
    container_name: dianxiaozhu-minio
    restart: always
    environment:
      MINIO_ROOT_USER: dianxiaozhu
      MINIO_ROOT_PASSWORD: dianxiaozhu123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - dianxiaozhu-network

  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: dianxiaozhu-backend
    restart: always
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
      kafka:
        condition: service_started
      elasticsearch:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8081:8080"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    networks:
      - dianxiaozhu-network

  # Nginx反向代理
  nginx:
    image: nginx:latest
    container_name: dianxiaozhu-nginx
    restart: always
    ports:
      - "8088:80" # 将Nginx端口映射到8088
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - nginx_logs:/var/log/nginx
    depends_on:
      backend:
        condition: service_healthy
      kafka-ui:
        condition: service_started
      kibana:
        condition: service_started
      minio:
        condition: service_started
    networks:
      - dianxiaozhu-network

# 数据卷
volumes:
  mysql_data:
  redis_data:
  elasticsearch_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  minio_data:
  nginx_logs:

# 网络
networks:
  dianxiaozhu-network:
    driver: bridge